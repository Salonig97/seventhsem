#This program reads the tf-model generated by main.py and then calculates tf-idf and saves it to file.
#now, when the query is fired, the model is read and the similarity is measured
from os import listdir
from os.path import isfile, join
from operator import itemgetter
import string
import sys
def buildTfIdfModelFromTfModel():
	tf_vector_model = eval(open("./input/tf_model", "r").read())
	
def innerProduct(query, document_dict): #here onwards, the similarity checks are in operation. query is the string to be searched and document_dict is tf-idf measure
	pass

def MinkawaskiDistance(query, document_dict, p):
	pass

def EucladianDistance(query, document_dict):
	pass

def ManhattanDistance(query, document_dict):
	pass

def CosineSimilarity(query, document_dict):
	pass

def preProcess(): #this file returnes the tf-idf if it already exists, else returns -1 suggesting invocation buildTfIdfModelFromTfModel
	pass

def main():
	print "Enter the query: ",
	query = str(raw_input())
	#find Tf-IDF of the query
	#now show result of every similarity measure technique.
	tf_idf = {}
	tf_idf = preProcess()
	innerProduct(query, tf_idf)
	#MinkawaskiDistance(qury, tf-idf)
	EucladianDistance(query, tf_idf)
	ManhattanDistance(query, tf_idf)
	CosineSimilarity(query, tf_idf)
if __name__ == '__main__':
	main()